
Uvod2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000232  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e13  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000097f  00000000  00000000  00001113  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004bd  00000000  00000000  00001a92  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  00001f50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000465  00000000  00000000  00001ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003d1  00000000  00000000  00002461  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002832  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 b5 00 	call	0x16a	; 0x16a <main>
  78:	0c 94 ed 00 	jmp	0x1da	; 0x1da <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_ZN3Led3setEbbb>:
{
} //~Led

void Led::set(bool r,bool g,bool b)
{
	if(r) cbi(PORTD,R_LED); else sbi(PORTD,R_LED);
  80:	66 23       	and	r22, r22
  82:	11 f0       	breq	.+4      	; 0x88 <_ZN3Led3setEbbb+0x8>
  84:	5e 98       	cbi	0x0b, 6	; 11
  86:	01 c0       	rjmp	.+2      	; 0x8a <_ZN3Led3setEbbb+0xa>
  88:	5e 9a       	sbi	0x0b, 6	; 11
	if(g) cbi(PORTD,G_LED); else sbi(PORTD,G_LED);
  8a:	44 23       	and	r20, r20
  8c:	11 f0       	breq	.+4      	; 0x92 <_ZN3Led3setEbbb+0x12>
  8e:	5b 98       	cbi	0x0b, 3	; 11
  90:	01 c0       	rjmp	.+2      	; 0x94 <_ZN3Led3setEbbb+0x14>
  92:	5b 9a       	sbi	0x0b, 3	; 11
	if(b) cbi(PORTD,B_LED); else sbi(PORTD,B_LED);
  94:	22 23       	and	r18, r18
  96:	11 f0       	breq	.+4      	; 0x9c <_ZN3Led3setEbbb+0x1c>
  98:	5d 98       	cbi	0x0b, 5	; 11
  9a:	08 95       	ret
  9c:	5d 9a       	sbi	0x0b, 5	; 11
  9e:	08 95       	ret

000000a0 <_ZN3LedC1Ev>:

// default constructor
Led::Led()
{
	/* set as outputs */
	sbi(DDRD,R_LED);  
  a0:	56 9a       	sbi	0x0a, 6	; 10
	sbi(DDRD,B_LED);
  a2:	55 9a       	sbi	0x0a, 5	; 10
	sbi(DDRD,G_LED);
  a4:	53 9a       	sbi	0x0a, 3	; 10
	
	set(false,false,false);	// set all leds off
  a6:	20 e0       	ldi	r18, 0x00	; 0
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	0e 94 40 00 	call	0x80	; 0x80 <_ZN3Led3setEbbb>
  b0:	08 95       	ret

000000b2 <_ZN3Led3setE6Colour>:
	if(b) cbi(PORTD,B_LED); else sbi(PORTD,B_LED);
}

void Led::set(Colour c)
{
	switch(c)
  b2:	61 30       	cpi	r22, 0x01	; 1
  b4:	61 f0       	breq	.+24     	; 0xce <_ZN3Led3setE6Colour+0x1c>
  b6:	28 f0       	brcs	.+10     	; 0xc2 <_ZN3Led3setE6Colour+0x10>
  b8:	62 30       	cpi	r22, 0x02	; 2
  ba:	79 f0       	breq	.+30     	; 0xda <_ZN3Led3setE6Colour+0x28>
  bc:	63 30       	cpi	r22, 0x03	; 3
  be:	99 f0       	breq	.+38     	; 0xe6 <_ZN3Led3setE6Colour+0x34>
  c0:	18 c0       	rjmp	.+48     	; 0xf2 <_ZN3Led3setE6Colour+0x40>
	{
		case 0:		set(1,0,0);
  c2:	20 e0       	ldi	r18, 0x00	; 0
  c4:	40 e0       	ldi	r20, 0x00	; 0
  c6:	61 e0       	ldi	r22, 0x01	; 1
  c8:	0e 94 40 00 	call	0x80	; 0x80 <_ZN3Led3setEbbb>
					break;
  cc:	08 95       	ret
		case 1:		set(0,1,0);
  ce:	20 e0       	ldi	r18, 0x00	; 0
  d0:	41 e0       	ldi	r20, 0x01	; 1
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	0e 94 40 00 	call	0x80	; 0x80 <_ZN3Led3setEbbb>
					break;
  d8:	08 95       	ret
		case 2:		set(0,0,1);
  da:	21 e0       	ldi	r18, 0x01	; 1
  dc:	40 e0       	ldi	r20, 0x00	; 0
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	0e 94 40 00 	call	0x80	; 0x80 <_ZN3Led3setEbbb>
					break;
  e4:	08 95       	ret
		case 3:		set(1,0,1);
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	40 e0       	ldi	r20, 0x00	; 0
  ea:	61 e0       	ldi	r22, 0x01	; 1
  ec:	0e 94 40 00 	call	0x80	; 0x80 <_ZN3Led3setEbbb>
					break;
  f0:	08 95       	ret
		default:	set(0,0,0);
  f2:	20 e0       	ldi	r18, 0x00	; 0
  f4:	40 e0       	ldi	r20, 0x00	; 0
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	0e 94 40 00 	call	0x80	; 0x80 <_ZN3Led3setEbbb>
  fc:	08 95       	ret

000000fe <_ZN3Led5blickEbbbi>:
	}
}

void Led::blick(bool r,bool g,bool b, int timeMs)
{
  fe:	0f 93       	push	r16
 100:	1f 93       	push	r17
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	ec 01       	movw	r28, r24
	this->set(r,g,b);
 108:	0e 94 40 00 	call	0x80	; 0x80 <_ZN3Led3setEbbb>
	for(int i=0; i<timeMs; i++) _delay_ms(1);
 10c:	10 16       	cp	r1, r16
 10e:	11 06       	cpc	r1, r17
 110:	0c f5       	brge	.+66     	; 0x154 <_ZN3Led5blickEbbbi+0x56>
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	e7 eb       	ldi	r30, 0xB7	; 183
 118:	fb e0       	ldi	r31, 0x0B	; 11
 11a:	31 97       	sbiw	r30, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <_ZN3Led5blickEbbbi+0x1c>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <_ZN3Led5blickEbbbi+0x22>
 120:	00 00       	nop
 122:	01 96       	adiw	r24, 0x01	; 1
 124:	08 17       	cp	r16, r24
 126:	19 07       	cpc	r17, r25
 128:	b1 f7       	brne	.-20     	; 0x116 <_ZN3Led5blickEbbbi+0x18>
 12a:	0b c0       	rjmp	.+22     	; 0x142 <_ZN3Led5blickEbbbi+0x44>
 12c:	e7 eb       	ldi	r30, 0xB7	; 183
 12e:	fb e0       	ldi	r31, 0x0B	; 11
 130:	31 97       	sbiw	r30, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <_ZN3Led5blickEbbbi+0x32>
 134:	00 c0       	rjmp	.+0      	; 0x136 <_ZN3Led5blickEbbbi+0x38>
 136:	00 00       	nop
	this->set(0,0,0);
	for(int i=0; i<timeMs; i++) _delay_ms(1);
 138:	01 96       	adiw	r24, 0x01	; 1
 13a:	08 17       	cp	r16, r24
 13c:	19 07       	cpc	r17, r25
 13e:	b1 f7       	brne	.-20     	; 0x12c <_ZN3Led5blickEbbbi+0x2e>
 140:	0f c0       	rjmp	.+30     	; 0x160 <_ZN3Led5blickEbbbi+0x62>

void Led::blick(bool r,bool g,bool b, int timeMs)
{
	this->set(r,g,b);
	for(int i=0; i<timeMs; i++) _delay_ms(1);
	this->set(0,0,0);
 142:	20 e0       	ldi	r18, 0x00	; 0
 144:	40 e0       	ldi	r20, 0x00	; 0
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	ce 01       	movw	r24, r28
 14a:	0e 94 40 00 	call	0x80	; 0x80 <_ZN3Led3setEbbb>
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	ec cf       	rjmp	.-40     	; 0x12c <_ZN3Led5blickEbbbi+0x2e>
 154:	20 e0       	ldi	r18, 0x00	; 0
 156:	40 e0       	ldi	r20, 0x00	; 0
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	ce 01       	movw	r24, r28
 15c:	0e 94 40 00 	call	0x80	; 0x80 <_ZN3Led3setEbbb>
	for(int i=0; i<timeMs; i++) _delay_ms(1);
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	1f 91       	pop	r17
 166:	0f 91       	pop	r16
 168:	08 95       	ret

0000016a <main>:

#include "Led.h"


int main(void)
{
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	1f 92       	push	r1
 170:	cd b7       	in	r28, 0x3d	; 61
 172:	de b7       	in	r29, 0x3e	; 62
	Led rgb;			// create object of class Led
 174:	ce 01       	movw	r24, r28
 176:	01 96       	adiw	r24, 0x01	; 1
 178:	0e 94 50 00 	call	0xa0	; 0xa0 <_ZN3LedC1Ev>
	Led *rgb_ptr;		// pointer to class Led
	rgb_ptr = &rgb;		// set pointer to adress of rgb object
	
	rgb.set(0,1,0);		// green led on;
 17c:	20 e0       	ldi	r18, 0x00	; 0
 17e:	41 e0       	ldi	r20, 0x01	; 1
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	ce 01       	movw	r24, r28
 184:	01 96       	adiw	r24, 0x01	; 1
 186:	0e 94 40 00 	call	0x80	; 0x80 <_ZN3Led3setEbbb>
 18a:	2f ef       	ldi	r18, 0xFF	; 255
 18c:	8e e9       	ldi	r24, 0x9E	; 158
 18e:	94 e2       	ldi	r25, 0x24	; 36
 190:	21 50       	subi	r18, 0x01	; 1
 192:	80 40       	sbci	r24, 0x00	; 0
 194:	90 40       	sbci	r25, 0x00	; 0
 196:	e1 f7       	brne	.-8      	; 0x190 <main+0x26>
 198:	00 c0       	rjmp	.+0      	; 0x19a <main+0x30>
 19a:	00 00       	nop
	_delay_ms(1000);
	rgb_ptr->set(0,0,0); // call method using pointer
 19c:	20 e0       	ldi	r18, 0x00	; 0
 19e:	40 e0       	ldi	r20, 0x00	; 0
 1a0:	60 e0       	ldi	r22, 0x00	; 0
 1a2:	ce 01       	movw	r24, r28
 1a4:	01 96       	adiw	r24, 0x01	; 1
 1a6:	0e 94 40 00 	call	0x80	; 0x80 <_ZN3Led3setEbbb>
	
	rgb.set(purple);
 1aa:	63 e0       	ldi	r22, 0x03	; 3
 1ac:	ce 01       	movw	r24, r28
 1ae:	01 96       	adiw	r24, 0x01	; 1
 1b0:	0e 94 59 00 	call	0xb2	; 0xb2 <_ZN3Led3setE6Colour>
 1b4:	2f ef       	ldi	r18, 0xFF	; 255
 1b6:	8e e9       	ldi	r24, 0x9E	; 158
 1b8:	94 e2       	ldi	r25, 0x24	; 36
 1ba:	21 50       	subi	r18, 0x01	; 1
 1bc:	80 40       	sbci	r24, 0x00	; 0
 1be:	90 40       	sbci	r25, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <main+0x50>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <main+0x5a>
 1c4:	00 00       	nop
	_delay_ms(1000);
    /* Replace with your application code */
    while (1) 
    {
		rgb.blick(0,0,1,200);	// blick blue led (200 ms)
 1c6:	08 ec       	ldi	r16, 0xC8	; 200
 1c8:	10 e0       	ldi	r17, 0x00	; 0
 1ca:	21 e0       	ldi	r18, 0x01	; 1
 1cc:	40 e0       	ldi	r20, 0x00	; 0
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	ce 01       	movw	r24, r28
 1d2:	01 96       	adiw	r24, 0x01	; 1
 1d4:	0e 94 7f 00 	call	0xfe	; 0xfe <_ZN3Led5blickEbbbi>
 1d8:	f6 cf       	rjmp	.-20     	; 0x1c6 <main+0x5c>

000001da <_exit>:
 1da:	f8 94       	cli

000001dc <__stop_program>:
 1dc:	ff cf       	rjmp	.-2      	; 0x1dc <__stop_program>
