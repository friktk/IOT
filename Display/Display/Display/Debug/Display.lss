
Display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000204  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000288  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012ee  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bde  00000000  00000000  0000167a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000740  00000000  00000000  00002258  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000144  00000000  00000000  00002998  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000589  00000000  00000000  00002adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005f7  00000000  00000000  00003065  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  0000365c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 47 00 	jmp	0x8e	; 0x8e <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  68:	a4 00       	.word	0x00a4	; ????
  6a:	7e 00       	.word	0x007e	; ????
  6c:	80 00       	.word	0x0080	; ????
  6e:	82 00       	.word	0x0082	; ????
  70:	84 00       	.word	0x0084	; ????
  72:	86 00       	.word	0x0086	; ????
  74:	88 00       	.word	0x0088	; ????
  76:	8a 00       	.word	0x008a	; ????
  78:	8c 00       	.word	0x008c	; ????
  7a:	8e 00       	.word	0x008e	; ????
  7c:	90 00       	.word	0x0090	; ????
  7e:	92 00       	.word	0x0092	; ????
  80:	94 00       	.word	0x0094	; ????
  82:	96 00       	.word	0x0096	; ????
  84:	98 00       	.word	0x0098	; ????
  86:	9a 00       	.word	0x009a	; ????
  88:	9c 00       	.word	0x009c	; ????
  8a:	9e 00       	.word	0x009e	; ????
  8c:	a0 00       	.word	0x00a0	; ????

0000008e <__ctors_end>:
  8e:	11 24       	eor	r1, r1
  90:	1f be       	out	0x3f, r1	; 63
  92:	cf ef       	ldi	r28, 0xFF	; 255
  94:	d8 e0       	ldi	r29, 0x08	; 8
  96:	de bf       	out	0x3e, r29	; 62
  98:	cd bf       	out	0x3d, r28	; 61
  9a:	0e 94 c1 00 	call	0x182	; 0x182 <main>
  9e:	0c 94 00 01 	jmp	0x200	; 0x200 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_ZN6ButtonC1Ev>:
	cbi(DDRD,BTN);		// set as input
	sbi(PORTD,BTN);		// set pull-up 
} //Button

// default destructor
Button::~Button()
  a6:	52 98       	cbi	0x0a, 2	; 10
  a8:	5a 9a       	sbi	0x0b, 2	; 11
  aa:	08 95       	ret

000000ac <_ZN6Button9isPressedEv>:
/*	while((PIND & (1<<BTN))!=0){};			// wait, BTN=1
	_delay_ms(10);							// delay
	while((PIND & (1<<BTN))==0){};			// wait for release button	 
	return true;							// if BTN = 0  . . . pressed
*/
	if((PIND & (1<<BTN))==0) return true;	// pressed
  ac:	89 b1       	in	r24, 0x09	; 9
  ae:	82 fb       	bst	r24, 2
  b0:	88 27       	eor	r24, r24
  b2:	80 f9       	bld	r24, 0
	else return false;						// released
  b4:	91 e0       	ldi	r25, 0x01	; 1
  b6:	89 27       	eor	r24, r25
  b8:	08 95       	ret

000000ba <_ZN7DisplayC1Ev>:
	sbi(DDRD,RCLK);
	sbi(DDRB,SRCLK);
} //Display

// default destructor
Display::~Display()
  ba:	3d 9a       	sbi	0x07, 5	; 7
  bc:	3c 9a       	sbi	0x07, 4	; 7
  be:	57 9a       	sbi	0x0a, 7	; 10
  c0:	21 9a       	sbi	0x04, 1	; 4
  c2:	08 95       	ret

000000c4 <_ZN7Display7displayEh>:
}

/* private method */
void Display::display(uint8_t character)
{
	sbi(PORTC,OE);				// set output to HI (high impedance)
  c4:	44 9a       	sbi	0x08, 4	; 8
  c6:	88 e0       	ldi	r24, 0x08	; 8
	for(uint8_t i=0;i<8;i++)
	{
		if((character & 0b10000000)==0b10000000) sbi(PORTC,SER);else cbi(PORTC,SER);	//data
  c8:	66 23       	and	r22, r22
  ca:	14 f4       	brge	.+4      	; 0xd0 <_ZN7Display7displayEh+0xc>
  cc:	45 9a       	sbi	0x08, 5	; 8
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <_ZN7Display7displayEh+0xe>
  d0:	45 98       	cbi	0x08, 5	; 8
		sbi(PORTB,SRCLK);
  d2:	29 9a       	sbi	0x05, 1	; 5
		cbi(PORTB,SRCLK);	// clock
  d4:	29 98       	cbi	0x05, 1	; 5
		character=character<<1;
  d6:	66 0f       	add	r22, r22
  d8:	81 50       	subi	r24, 0x01	; 1

/* private method */
void Display::display(uint8_t character)
{
	sbi(PORTC,OE);				// set output to HI (high impedance)
	for(uint8_t i=0;i<8;i++)
  da:	b1 f7       	brne	.-20     	; 0xc8 <_ZN7Display7displayEh+0x4>
		if((character & 0b10000000)==0b10000000) sbi(PORTC,SER);else cbi(PORTC,SER);	//data
		sbi(PORTB,SRCLK);
		cbi(PORTB,SRCLK);	// clock
		character=character<<1;
	}
	sbi(PORTD,RCLK);		//	transcript from shift register to memory
  dc:	5f 9a       	sbi	0x0b, 7	; 11
	cbi(PORTD,RCLK);		//  impulse
  de:	5f 98       	cbi	0x0b, 7	; 11
	cbi(PORTC,OE);			//	set output
  e0:	44 98       	cbi	0x08, 4	; 8
  e2:	08 95       	ret

000000e4 <_ZN7Display4showEh>:

void Display::show(uint8_t character)
{
	uint8_t result;
	character= character & 0x1f;
	switch(character)
  e4:	e6 2f       	mov	r30, r22
  e6:	ef 71       	andi	r30, 0x1F	; 31
  e8:	4e 2f       	mov	r20, r30
  ea:	50 e0       	ldi	r21, 0x00	; 0
  ec:	43 31       	cpi	r20, 0x13	; 19
  ee:	51 05       	cpc	r21, r1
  f0:	48 f5       	brcc	.+82     	; 0x144 <_ZN7Display4showEh+0x60>
  f2:	fa 01       	movw	r30, r20
  f4:	ec 5c       	subi	r30, 0xCC	; 204
  f6:	ff 4f       	sbci	r31, 0xFF	; 255
  f8:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__tablejump2__>
	{
		case 0: result=zero; break;
		case 1: result=one; break;
  fc:	66 e0       	ldi	r22, 0x06	; 6
  fe:	25 c0       	rjmp	.+74     	; 0x14a <_ZN7Display4showEh+0x66>
		case 2: result=two; break;
 100:	6b e5       	ldi	r22, 0x5B	; 91
 102:	23 c0       	rjmp	.+70     	; 0x14a <_ZN7Display4showEh+0x66>
		case 3: result=three; break;
 104:	6f e4       	ldi	r22, 0x4F	; 79
 106:	21 c0       	rjmp	.+66     	; 0x14a <_ZN7Display4showEh+0x66>
		case 4: result=four; break;
 108:	66 e6       	ldi	r22, 0x66	; 102
 10a:	1f c0       	rjmp	.+62     	; 0x14a <_ZN7Display4showEh+0x66>
		case 5: result=five; break;
 10c:	6d e6       	ldi	r22, 0x6D	; 109
 10e:	1d c0       	rjmp	.+58     	; 0x14a <_ZN7Display4showEh+0x66>
		case 6: result=six; break;
 110:	6d e7       	ldi	r22, 0x7D	; 125
 112:	1b c0       	rjmp	.+54     	; 0x14a <_ZN7Display4showEh+0x66>
		case 7: result=seven; break;
 114:	67 e0       	ldi	r22, 0x07	; 7
 116:	19 c0       	rjmp	.+50     	; 0x14a <_ZN7Display4showEh+0x66>
		case 8: result=eight; break;
 118:	6f e7       	ldi	r22, 0x7F	; 127
 11a:	17 c0       	rjmp	.+46     	; 0x14a <_ZN7Display4showEh+0x66>
		case 9: result=nine; break;
 11c:	6f e6       	ldi	r22, 0x6F	; 111
 11e:	15 c0       	rjmp	.+42     	; 0x14a <_ZN7Display4showEh+0x66>
		case 10: result=ahex; break;
 120:	67 e7       	ldi	r22, 0x77	; 119
 122:	13 c0       	rjmp	.+38     	; 0x14a <_ZN7Display4showEh+0x66>
		case 11: result=bhex; break;
 124:	6c e7       	ldi	r22, 0x7C	; 124
 126:	11 c0       	rjmp	.+34     	; 0x14a <_ZN7Display4showEh+0x66>
		case 12: result=chex; break;
 128:	68 e5       	ldi	r22, 0x58	; 88
 12a:	0f c0       	rjmp	.+30     	; 0x14a <_ZN7Display4showEh+0x66>
		case 13: result=dhex; break;
 12c:	6e e5       	ldi	r22, 0x5E	; 94
 12e:	0d c0       	rjmp	.+26     	; 0x14a <_ZN7Display4showEh+0x66>
		case 14: result=ehex; break;
 130:	69 e7       	ldi	r22, 0x79	; 121
 132:	0b c0       	rjmp	.+22     	; 0x14a <_ZN7Display4showEh+0x66>
		case 15: result=fhex; break;
 134:	61 e7       	ldi	r22, 0x71	; 113
 136:	09 c0       	rjmp	.+18     	; 0x14a <_ZN7Display4showEh+0x66>
		case 16: result=dot; break;
 138:	60 e8       	ldi	r22, 0x80	; 128
 13a:	07 c0       	rjmp	.+14     	; 0x14a <_ZN7Display4showEh+0x66>
		case 17: result=err; break;
 13c:	69 e4       	ldi	r22, 0x49	; 73
 13e:	05 c0       	rjmp	.+10     	; 0x14a <_ZN7Display4showEh+0x66>
		case 18: result=non; break;
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	03 c0       	rjmp	.+6      	; 0x14a <_ZN7Display4showEh+0x66>
		default: result=non;
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	01 c0       	rjmp	.+2      	; 0x14a <_ZN7Display4showEh+0x66>
{
	uint8_t result;
	character= character & 0x1f;
	switch(character)
	{
		case 0: result=zero; break;
 148:	6f e3       	ldi	r22, 0x3F	; 63
		case 16: result=dot; break;
		case 17: result=err; break;
		case 18: result=non; break;
		default: result=non;
	}	
	this->display(result);			// display(result)
 14a:	0e 94 62 00 	call	0xc4	; 0xc4 <_ZN7Display7displayEh>
 14e:	08 95       	ret

00000150 <_ZN3Led3setEbbb>:
{
} //~Led

void Led::set(bool r,bool g,bool b)
{
	if(r) cbi(PORTD,R_LED); else sbi(PORTD,R_LED);
 150:	66 23       	and	r22, r22
 152:	11 f0       	breq	.+4      	; 0x158 <_ZN3Led3setEbbb+0x8>
 154:	5e 98       	cbi	0x0b, 6	; 11
 156:	01 c0       	rjmp	.+2      	; 0x15a <_ZN3Led3setEbbb+0xa>
 158:	5e 9a       	sbi	0x0b, 6	; 11
	if(g) cbi(PORTD,G_LED); else sbi(PORTD,G_LED);
 15a:	44 23       	and	r20, r20
 15c:	11 f0       	breq	.+4      	; 0x162 <_ZN3Led3setEbbb+0x12>
 15e:	5b 98       	cbi	0x0b, 3	; 11
 160:	01 c0       	rjmp	.+2      	; 0x164 <_ZN3Led3setEbbb+0x14>
 162:	5b 9a       	sbi	0x0b, 3	; 11
	if(b) cbi(PORTD,B_LED); else sbi(PORTD,B_LED);
 164:	22 23       	and	r18, r18
 166:	11 f0       	breq	.+4      	; 0x16c <_ZN3Led3setEbbb+0x1c>
 168:	5d 98       	cbi	0x0b, 5	; 11
 16a:	08 95       	ret
 16c:	5d 9a       	sbi	0x0b, 5	; 11
 16e:	08 95       	ret

00000170 <_ZN3LedC1Ev>:

// default constructor
Led::Led()
{
	/* set as outputs */
	sbi(DDRD,R_LED);
 170:	56 9a       	sbi	0x0a, 6	; 10
	sbi(DDRD,B_LED);
 172:	55 9a       	sbi	0x0a, 5	; 10
	sbi(DDRD,G_LED);
 174:	53 9a       	sbi	0x0a, 3	; 10
	
	set(false,false,false);	// set all leds off
 176:	20 e0       	ldi	r18, 0x00	; 0
 178:	40 e0       	ldi	r20, 0x00	; 0
 17a:	60 e0       	ldi	r22, 0x00	; 0
 17c:	0e 94 a8 00 	call	0x150	; 0x150 <_ZN3Led3setEbbb>
 180:	08 95       	ret

00000182 <main>:
#include "Button.h"
#include "Display.h"


int main(void)
{
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	00 d0       	rcall	.+0      	; 0x188 <main+0x6>
 188:	1f 92       	push	r1
 18a:	cd b7       	in	r28, 0x3d	; 61
 18c:	de b7       	in	r29, 0x3e	; 62
	Led rgb;			// create object of class Led
 18e:	ce 01       	movw	r24, r28
 190:	01 96       	adiw	r24, 0x01	; 1
 192:	0e 94 b8 00 	call	0x170	; 0x170 <_ZN3LedC1Ev>
//	Led *rgb_ptr;		// pointer to class Led
//	rgb_ptr = &rgb;		// set pointer to adress of rgb object	
	rgb.set(0,1,0);		// green led on;
 196:	20 e0       	ldi	r18, 0x00	; 0
 198:	41 e0       	ldi	r20, 0x01	; 1
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	ce 01       	movw	r24, r28
 19e:	01 96       	adiw	r24, 0x01	; 1
 1a0:	0e 94 a8 00 	call	0x150	; 0x150 <_ZN3Led3setEbbb>

	Button btn;					// create object of class Button
 1a4:	ce 01       	movw	r24, r28
 1a6:	02 96       	adiw	r24, 0x02	; 2
 1a8:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN6ButtonC1Ev>
	while(!btn.isPressed()){}	// wait until btn is pressed
 1ac:	ce 01       	movw	r24, r28
 1ae:	02 96       	adiw	r24, 0x02	; 2
 1b0:	0e 94 56 00 	call	0xac	; 0xac <_ZN6Button9isPressedEv>
 1b4:	88 23       	and	r24, r24
 1b6:	d1 f3       	breq	.-12     	; 0x1ac <main+0x2a>
	rgb.set(0,0,0);				// turn off leds
 1b8:	20 e0       	ldi	r18, 0x00	; 0
 1ba:	40 e0       	ldi	r20, 0x00	; 0
 1bc:	60 e0       	ldi	r22, 0x00	; 0
 1be:	ce 01       	movw	r24, r28
 1c0:	01 96       	adiw	r24, 0x01	; 1
 1c2:	0e 94 a8 00 	call	0x150	; 0x150 <_ZN3Led3setEbbb>

	Display dsp;				// create object of class Display
 1c6:	ce 01       	movw	r24, r28
 1c8:	03 96       	adiw	r24, 0x03	; 3
 1ca:	0e 94 5d 00 	call	0xba	; 0xba <_ZN7DisplayC1Ev>
	
	for (uint8_t i=0; i<=18;i++)
 1ce:	10 e0       	ldi	r17, 0x00	; 0
	{
		dsp.show(i);
 1d0:	61 2f       	mov	r22, r17
 1d2:	ce 01       	movw	r24, r28
 1d4:	03 96       	adiw	r24, 0x03	; 3
 1d6:	0e 94 72 00 	call	0xe4	; 0xe4 <_ZN7Display4showEh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1da:	2f e7       	ldi	r18, 0x7F	; 127
 1dc:	8f e4       	ldi	r24, 0x4F	; 79
 1de:	92 e1       	ldi	r25, 0x12	; 18
 1e0:	21 50       	subi	r18, 0x01	; 1
 1e2:	80 40       	sbci	r24, 0x00	; 0
 1e4:	90 40       	sbci	r25, 0x00	; 0
 1e6:	e1 f7       	brne	.-8      	; 0x1e0 <main+0x5e>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <main+0x68>
 1ea:	00 00       	nop
	while(!btn.isPressed()){}	// wait until btn is pressed
	rgb.set(0,0,0);				// turn off leds

	Display dsp;				// create object of class Display
	
	for (uint8_t i=0; i<=18;i++)
 1ec:	1f 5f       	subi	r17, 0xFF	; 255
 1ee:	13 31       	cpi	r17, 0x13	; 19
 1f0:	79 f7       	brne	.-34     	; 0x1d0 <main+0x4e>
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <main+0x70>

000001f4 <__tablejump2__>:
 1f4:	ee 0f       	add	r30, r30
 1f6:	ff 1f       	adc	r31, r31
 1f8:	05 90       	lpm	r0, Z+
 1fa:	f4 91       	lpm	r31, Z
 1fc:	e0 2d       	mov	r30, r0
 1fe:	09 94       	ijmp

00000200 <_exit>:
 200:	f8 94       	cli

00000202 <__stop_program>:
 202:	ff cf       	rjmp	.-2      	; 0x202 <__stop_program>
