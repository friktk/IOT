
PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000220  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000142a  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bdc  00000000  00000000  000017da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000838  00000000  00000000  000023b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000154  00000000  00000000  00002bf0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005a8  00000000  00000000  00002d44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006ae  00000000  00000000  000032ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  0000399a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 a9 00 	call	0x152	; 0x152 <main>
  78:	0c 94 0e 01 	jmp	0x21c	; 0x21c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_ZN6ButtonC1Ev>:
	cbi(DDRD,BTN);		// set as input
	sbi(PORTD,BTN);		// set pull-up 
} //Button

// default destructor
Button::~Button()
  80:	52 98       	cbi	0x0a, 2	; 10
  82:	5a 9a       	sbi	0x0b, 2	; 11
  84:	08 95       	ret

00000086 <_ZN6Button9isPressedEv>:
/*	while((PIND & (1<<BTN))!=0){};			// wait, BTN=1
	_delay_ms(10);							// delay
	while((PIND & (1<<BTN))==0){};			// wait for release button	 
	return true;							// if BTN = 0  . . . pressed
*/
	if((PIND & (1<<BTN))==0) return true;	// pressed
  86:	89 b1       	in	r24, 0x09	; 9
  88:	82 fb       	bst	r24, 2
  8a:	88 27       	eor	r24, r24
  8c:	80 f9       	bld	r24, 0
	else return false;						// released
  8e:	91 e0       	ldi	r25, 0x01	; 1
  90:	89 27       	eor	r24, r25
  92:	08 95       	ret

00000094 <_ZN7DisplayC1Ev>:

// default constructor
Display::Display()
{
	/* Set as outputs */
	sbi(DDRC,SER);
  94:	3d 9a       	sbi	0x07, 5	; 7
	sbi(DDRC,OE);
  96:	3c 9a       	sbi	0x07, 4	; 7
	sbi(DDRD,RCLK);
  98:	57 9a       	sbi	0x0a, 7	; 10
	sbi(DDRB,SRCLK);
  9a:	21 9a       	sbi	0x04, 1	; 4
  9c:	08 95       	ret

0000009e <_ZN3Led3setEbbb>:
{
} //~Led

void Led::set(bool r,bool g,bool b)
{
	if(r) cbi(PORTD,R_LED); else sbi(PORTD,R_LED);
  9e:	66 23       	and	r22, r22
  a0:	11 f0       	breq	.+4      	; 0xa6 <_ZN3Led3setEbbb+0x8>
  a2:	5e 98       	cbi	0x0b, 6	; 11
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <_ZN3Led3setEbbb+0xa>
  a6:	5e 9a       	sbi	0x0b, 6	; 11
	if(g) cbi(PORTD,G_LED); else sbi(PORTD,G_LED);
  a8:	44 23       	and	r20, r20
  aa:	11 f0       	breq	.+4      	; 0xb0 <_ZN3Led3setEbbb+0x12>
  ac:	5b 98       	cbi	0x0b, 3	; 11
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <_ZN3Led3setEbbb+0x14>
  b0:	5b 9a       	sbi	0x0b, 3	; 11
	if(b) cbi(PORTD,B_LED); else sbi(PORTD,B_LED);
  b2:	22 23       	and	r18, r18
  b4:	11 f0       	breq	.+4      	; 0xba <_ZN3Led3setEbbb+0x1c>
  b6:	5d 98       	cbi	0x0b, 5	; 11
  b8:	08 95       	ret
  ba:	5d 9a       	sbi	0x0b, 5	; 11
  bc:	08 95       	ret

000000be <_ZN3LedC1Ev>:

// default constructor
Led::Led()
{
	/* set as outputs */
	sbi(DDRD,R_LED);
  be:	56 9a       	sbi	0x0a, 6	; 10
	sbi(DDRD,B_LED);
  c0:	55 9a       	sbi	0x0a, 5	; 10
	sbi(DDRD,G_LED);
  c2:	53 9a       	sbi	0x0a, 3	; 10
	
	TCCR0A = (1<<WGM01)|(1<<WGM00);		// fast PWM TC0
  c4:	33 e0       	ldi	r19, 0x03	; 3
  c6:	34 bd       	out	0x24, r19	; 36
	TCCR0B = (1<<CS02);					// clkio/256    (183 Hz)
  c8:	24 e0       	ldi	r18, 0x04	; 4
  ca:	25 bd       	out	0x25, r18	; 37
	TCCR2A = (1<<WGM21)|(1<<WGM20);		// fast PWM TC2
  cc:	30 93 b0 00 	sts	0x00B0, r19	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	TCCR2B = (1<<CS22);
  d0:	20 93 b1 00 	sts	0x00B1, r18	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	
	set(0,0,0);	// set all leds off
  d4:	20 e0       	ldi	r18, 0x00	; 0
  d6:	40 e0       	ldi	r20, 0x00	; 0
  d8:	60 e0       	ldi	r22, 0x00	; 0
  da:	0e 94 4f 00 	call	0x9e	; 0x9e <_ZN3Led3setEbbb>
  de:	08 95       	ret

000000e0 <_ZN3Led12setIntensityEhhh>:
	if(b) cbi(PORTD,B_LED); else sbi(PORTD,B_LED);
}

void Led::setIntensity(uint8_t r, uint8_t g, uint8_t b)
{
	if(r==0) 
  e0:	61 11       	cpse	r22, r1
  e2:	08 c0       	rjmp	.+16     	; 0xf4 <_ZN3Led12setIntensityEhhh+0x14>
	{
		cbi(TCCR0A,COM0A0);
  e4:	84 b5       	in	r24, 0x24	; 36
  e6:	8f 7b       	andi	r24, 0xBF	; 191
  e8:	84 bd       	out	0x24, r24	; 36
		cbi(TCCR0A,COM0A1); 
  ea:	84 b5       	in	r24, 0x24	; 36
  ec:	8f 77       	andi	r24, 0x7F	; 127
  ee:	84 bd       	out	0x24, r24	; 36
		sbi(PORTD,R_LED);
  f0:	5e 9a       	sbi	0x0b, 6	; 11
  f2:	07 c0       	rjmp	.+14     	; 0x102 <_ZN3Led12setIntensityEhhh+0x22>
	} 
	else
	{ 
		sbi(TCCR0A, COM0A0);
  f4:	84 b5       	in	r24, 0x24	; 36
  f6:	80 64       	ori	r24, 0x40	; 64
  f8:	84 bd       	out	0x24, r24	; 36
		sbi(TCCR0A, COM0A1); 
  fa:	84 b5       	in	r24, 0x24	; 36
  fc:	80 68       	ori	r24, 0x80	; 128
  fe:	84 bd       	out	0x24, r24	; 36
		OCR0A = r;
 100:	67 bd       	out	0x27, r22	; 39
	}

	if(g==0) 
 102:	41 11       	cpse	r20, r1
 104:	0a c0       	rjmp	.+20     	; 0x11a <_ZN3Led12setIntensityEhhh+0x3a>
	{
		cbi(TCCR2A,COM2B0);
 106:	e0 eb       	ldi	r30, 0xB0	; 176
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	8f 7e       	andi	r24, 0xEF	; 239
 10e:	80 83       	st	Z, r24
		cbi(TCCR2A,COM2B1);
 110:	80 81       	ld	r24, Z
 112:	8f 7d       	andi	r24, 0xDF	; 223
 114:	80 83       	st	Z, r24
		sbi(PORTD,G_LED);
 116:	5b 9a       	sbi	0x0b, 3	; 11
 118:	0a c0       	rjmp	.+20     	; 0x12e <_ZN3Led12setIntensityEhhh+0x4e>
	} 
	else
	{ 
		sbi(TCCR2A, COM2B0);
 11a:	e0 eb       	ldi	r30, 0xB0	; 176
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	80 61       	ori	r24, 0x10	; 16
 122:	80 83       	st	Z, r24
		sbi(TCCR2A, COM2B1); 
 124:	80 81       	ld	r24, Z
 126:	80 62       	ori	r24, 0x20	; 32
 128:	80 83       	st	Z, r24
		OCR2B = g;
 12a:	40 93 b4 00 	sts	0x00B4, r20	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
	}

	if(b==0) 
 12e:	21 11       	cpse	r18, r1
 130:	08 c0       	rjmp	.+16     	; 0x142 <_ZN3Led12setIntensityEhhh+0x62>
	{
		cbi(TCCR0A,COM0B0);
 132:	84 b5       	in	r24, 0x24	; 36
 134:	8f 7e       	andi	r24, 0xEF	; 239
 136:	84 bd       	out	0x24, r24	; 36
		cbi(TCCR0A,COM0B1); 
 138:	84 b5       	in	r24, 0x24	; 36
 13a:	8f 7d       	andi	r24, 0xDF	; 223
 13c:	84 bd       	out	0x24, r24	; 36
		sbi(PORTD,B_LED);
 13e:	5d 9a       	sbi	0x0b, 5	; 11
 140:	08 95       	ret
	} 
	else
	{ 
		sbi(TCCR0A, COM0B0);
 142:	84 b5       	in	r24, 0x24	; 36
 144:	80 61       	ori	r24, 0x10	; 16
 146:	84 bd       	out	0x24, r24	; 36
		sbi(TCCR0A, COM0B1); 
 148:	84 b5       	in	r24, 0x24	; 36
 14a:	80 62       	ori	r24, 0x20	; 32
 14c:	84 bd       	out	0x24, r24	; 36
		OCR0B = b; 
 14e:	28 bd       	out	0x28, r18	; 40
 150:	08 95       	ret

00000152 <main>:
#include "Button.h"
#include "Display.h"


int main(void)
{
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	00 d0       	rcall	.+0      	; 0x158 <main+0x6>
 158:	1f 92       	push	r1
 15a:	cd b7       	in	r28, 0x3d	; 61
 15c:	de b7       	in	r29, 0x3e	; 62
	Led rgb;			// create object of class Led
 15e:	ce 01       	movw	r24, r28
 160:	01 96       	adiw	r24, 0x01	; 1
 162:	0e 94 5f 00 	call	0xbe	; 0xbe <_ZN3LedC1Ev>
//	Led *rgb_ptr;		// pointer to class Led
//	rgb_ptr = &rgb;		// set pointer to adress of rgb object	
	rgb.set(0,1,0);		// green led on;
 166:	20 e0       	ldi	r18, 0x00	; 0
 168:	41 e0       	ldi	r20, 0x01	; 1
 16a:	60 e0       	ldi	r22, 0x00	; 0
 16c:	ce 01       	movw	r24, r28
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	0e 94 4f 00 	call	0x9e	; 0x9e <_ZN3Led3setEbbb>

	Button btn;					// create object of class Button
 174:	ce 01       	movw	r24, r28
 176:	02 96       	adiw	r24, 0x02	; 2
 178:	0e 94 40 00 	call	0x80	; 0x80 <_ZN6ButtonC1Ev>
	while(!btn.isPressed()){}	// wait until btn is pressed
 17c:	ce 01       	movw	r24, r28
 17e:	02 96       	adiw	r24, 0x02	; 2
 180:	0e 94 43 00 	call	0x86	; 0x86 <_ZN6Button9isPressedEv>
 184:	88 23       	and	r24, r24
 186:	d1 f3       	breq	.-12     	; 0x17c <main+0x2a>
	rgb.set(0,0,0);				// turn off leds
 188:	20 e0       	ldi	r18, 0x00	; 0
 18a:	40 e0       	ldi	r20, 0x00	; 0
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	ce 01       	movw	r24, r28
 190:	01 96       	adiw	r24, 0x01	; 1
 192:	0e 94 4f 00 	call	0x9e	; 0x9e <_ZN3Led3setEbbb>

	Display dsp;				// create object of class Display
 196:	ce 01       	movw	r24, r28
 198:	03 96       	adiw	r24, 0x03	; 3
 19a:	0e 94 4a 00 	call	0x94	; 0x94 <_ZN7DisplayC1Ev>
	
    /* Replace with your application code */
	uint8_t pom=0;
 19e:	00 e0       	ldi	r16, 0x00	; 0
    while (1) 
    {
		for(uint8_t i=0 ; i<255 ; i++)
 1a0:	10 e0       	ldi	r17, 0x00	; 0
		{
			switch(pom)
 1a2:	01 30       	cpi	r16, 0x01	; 1
 1a4:	69 f0       	breq	.+26     	; 0x1c0 <main+0x6e>
 1a6:	18 f0       	brcs	.+6      	; 0x1ae <main+0x5c>
 1a8:	02 30       	cpi	r16, 0x02	; 2
 1aa:	91 f0       	breq	.+36     	; 0x1d0 <main+0x7e>
 1ac:	19 c0       	rjmp	.+50     	; 0x1e0 <main+0x8e>
			{
				case 0 :	rgb.setIntensity(i,0,0);
 1ae:	20 e0       	ldi	r18, 0x00	; 0
 1b0:	40 e0       	ldi	r20, 0x00	; 0
 1b2:	61 2f       	mov	r22, r17
 1b4:	ce 01       	movw	r24, r28
 1b6:	01 96       	adiw	r24, 0x01	; 1
 1b8:	0e 94 70 00 	call	0xe0	; 0xe0 <_ZN3Led12setIntensityEhhh>
							break;
 1bc:	00 e0       	ldi	r16, 0x00	; 0
 1be:	21 c0       	rjmp	.+66     	; 0x202 <main+0xb0>
				case 1 :	rgb.setIntensity(0,i,0);
 1c0:	20 e0       	ldi	r18, 0x00	; 0
 1c2:	41 2f       	mov	r20, r17
 1c4:	60 e0       	ldi	r22, 0x00	; 0
 1c6:	ce 01       	movw	r24, r28
 1c8:	01 96       	adiw	r24, 0x01	; 1
 1ca:	0e 94 70 00 	call	0xe0	; 0xe0 <_ZN3Led12setIntensityEhhh>
							break;
 1ce:	19 c0       	rjmp	.+50     	; 0x202 <main+0xb0>
				case 2 :	rgb.setIntensity(0,0,i);
 1d0:	21 2f       	mov	r18, r17
 1d2:	40 e0       	ldi	r20, 0x00	; 0
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	ce 01       	movw	r24, r28
 1d8:	01 96       	adiw	r24, 0x01	; 1
 1da:	0e 94 70 00 	call	0xe0	; 0xe0 <_ZN3Led12setIntensityEhhh>
							break;
 1de:	11 c0       	rjmp	.+34     	; 0x202 <main+0xb0>
				default:	rgb.setIntensity(0,0,0);
 1e0:	20 e0       	ldi	r18, 0x00	; 0
 1e2:	40 e0       	ldi	r20, 0x00	; 0
 1e4:	60 e0       	ldi	r22, 0x00	; 0
 1e6:	ce 01       	movw	r24, r28
 1e8:	01 96       	adiw	r24, 0x01	; 1
 1ea:	0e 94 70 00 	call	0xe0	; 0xe0 <_ZN3Led12setIntensityEhhh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ee:	87 ec       	ldi	r24, 0xC7	; 199
 1f0:	9f ea       	ldi	r25, 0xAF	; 175
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <main+0xa0>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <main+0xa6>
 1f8:	00 00       	nop
	
    /* Replace with your application code */
	uint8_t pom=0;
    while (1) 
    {
		for(uint8_t i=0 ; i<255 ; i++)
 1fa:	1f 5f       	subi	r17, 0xFF	; 255
 1fc:	1f 3f       	cpi	r17, 0xFF	; 255
 1fe:	b9 f6       	brne	.-82     	; 0x1ae <main+0x5c>
 200:	0a c0       	rjmp	.+20     	; 0x216 <main+0xc4>
 202:	87 ec       	ldi	r24, 0xC7	; 199
 204:	9f ea       	ldi	r25, 0xAF	; 175
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <main+0xb4>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <main+0xba>
 20c:	00 00       	nop
 20e:	1f 5f       	subi	r17, 0xFF	; 255
 210:	1f 3f       	cpi	r17, 0xFF	; 255
 212:	39 f6       	brne	.-114    	; 0x1a2 <main+0x50>
 214:	01 c0       	rjmp	.+2      	; 0x218 <main+0xc6>
				case 1 :	rgb.setIntensity(0,i,0);
							break;
				case 2 :	rgb.setIntensity(0,0,i);
							break;
				default:	rgb.setIntensity(0,0,0);
							pom =0;
 216:	00 e0       	ldi	r16, 0x00	; 0
							break;
			}
			_delay_ms(15);
		}
		pom++;
 218:	0f 5f       	subi	r16, 0xFF	; 255

	Display dsp;				// create object of class Display
	
    /* Replace with your application code */
	uint8_t pom=0;
    while (1) 
 21a:	c2 cf       	rjmp	.-124    	; 0x1a0 <main+0x4e>

0000021c <_exit>:
 21c:	f8 94       	cli

0000021e <__stop_program>:
 21e:	ff cf       	rjmp	.-2      	; 0x21e <__stop_program>
